/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./Classes/DraggableMixin.ts":
/*!***********************************!*\
  !*** ./Classes/DraggableMixin.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nconst DraggableMixin = (superClass) => (class extends superClass {\n    constructor() {\n        super();\n        this.pos1 = 0;\n        this.pos2 = 0;\n        this.pos3 = 0;\n        this.pos4 = 0;\n    }\n    /* computed properties */\n    get elmnt() {\n        return this.draggableElement;\n    }\n    /* methods */\n    setHeaderAsDraggable() {\n        this.header.onmousedown = this.dragMouseDown.bind(this);\n    }\n    dragMouseDown(e) {\n        console.log('test');\n        e.preventDefault();\n        // e.stopPropagation();\n        // get the mouse cursor position at startup:\n        this.pos3 = e.clientX;\n        this.pos4 = e.clientY;\n        document.onmouseup = this.closeDragElement.bind(this);\n        // call a function whenever the cursor moves:\n        document.onmousemove = this.elementDrag.bind(this);\n    }\n    elementDrag(e) {\n        e.preventDefault();\n        // calculate the new cursor position:\n        this.pos1 = this.pos3 - e.clientX;\n        this.pos2 = this.pos4 - e.clientY;\n        this.pos3 = e.clientX;\n        this.pos4 = e.clientY;\n        // set the element's new position:\n        const offsetTop = this.elmnt.offsetTop < 0 ? 0 : this.elmnt.offsetTop;\n        this.elmnt.style.top = (offsetTop - this.pos2) + \"px\";\n        this.elmnt.style.left = (this.elmnt.offsetLeft - this.pos1) + \"px\";\n    }\n    closeDragElement() {\n        // stop moving when mouse button is released:\n        document.onmouseup = null;\n        document.onmousemove = null;\n    }\n});\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (DraggableMixin);\n\n\n//# sourceURL=webpack://jsonwindowts/./Classes/DraggableMixin.ts?");

/***/ }),

/***/ "./Classes/MetaData.ts":
/*!*****************************!*\
  !*** ./Classes/MetaData.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ MetaData)\n/* harmony export */ });\nclass MetaData {\n}\n\n\n//# sourceURL=webpack://jsonwindowts/./Classes/MetaData.ts?");

/***/ }),

/***/ "./Classes/SalesforceNetworkPayload.ts":
/*!*********************************************!*\
  !*** ./Classes/SalesforceNetworkPayload.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ SalesforceNetworkPayload)\n/* harmony export */ });\n/* harmony import */ var _MetaData__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./MetaData */ \"./Classes/MetaData.ts\");\n\nclass SalesforceNetworkPayload {\n    constructor(jsonStr = '{}') {\n        this.jsonStr = jsonStr && jsonStr.replace(/\\r\\n|\\r|\\n/g, '');\n        const { actions = [] } = this.inputNode;\n        this.payload = this.errorMessage;\n        this.metadata = [];\n        this.payloads = actions.map(this.parseAction.bind(this));\n        this.errorMessage = ({ Error: \"Did not find Your value\" });\n    }\n    //computed properties\n    get parsedString() {\n        const returnValue = this.payloads.length > 1 ? this.payloads : this.payload;\n        return JSON.stringify(returnValue, null, 2);\n    }\n    get inputNode() {\n        this.trimMessageText();\n        this._inputNode = this._inputNode || JSON.parse(this.jsonStr);\n        if (Array.isArray(this._inputNode)) {\n            const actions = this._inputNode;\n            this._inputNode = { actions };\n        }\n        return this._inputNode;\n    }\n    //methods\n    trimMessageText() {\n        const jsonStr = !!this.jsonStr;\n        const longerThanNineChars = this.jsonStr.length > 9;\n        const stringBeginsWithMessageColon = jsonStr && longerThanNineChars && this.jsonStr.substring(0, 9) == 'message: ';\n        if (stringBeginsWithMessageColon)\n            this.jsonStr = this.jsonStr.slice(9);\n    }\n    parseAction(currentAction) {\n        this.currentAction = currentAction;\n        this.getParamsFromInputNode();\n        this.metadata.push(this.currentMetadata);\n        return this.payload;\n    }\n    getParamsFromInputNode() {\n        var _a;\n        // Initial params from parsing input node \n        const { params, returnValue, result, callingDescriptor } = this.currentAction || {};\n        const { returnValue: returnValueNested } = returnValue || {};\n        const { namespace, classname, method, params: paramsNested } = params || {};\n        this.currentMetadata = new _MetaData__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n        this.payload = result || returnValueNested || returnValue || paramsNested || params || this.errorMessage;\n        this.payload = typeof this.payload === 'string' ? JSON.parse(this.payload || '{}') : this.payload;\n        // Secondary params\n        let { sClassName, sMethodName, drBundle, type, resultType } = this.payload;\n        //attempt to target child payload node on class/method\n        switch (classname) {\n            case 'ComponentController':\n            case 'FlexRuntime':\n                if (method == 'handleData') {\n                    if (this.payload.dataSourceMap)\n                        this.payload = JSON.parse(this.payload.dataSourceMap);\n                    type = this.payload.type;\n                    sMethodName = this.payload.value.ipMethod;\n                    drBundle = this.payload.value.bundleName;\n                    this.payload = JSON.parse(((_a = this.payload.value) === null || _a === void 0 ? void 0 : _a.inputMap) || '{}');\n                }\n                break;\n            case 'BusinessProcessDisplayController':\n            case 'NewportUtilities':\n                switch (method) {\n                    case 'GenericInvoke2NoCont':\n                        if (this.payload.input)\n                            this.payload = JSON.parse(this.payload.input);\n                        if (this.payload.Bundle && this.payload.DRParams) {\n                            drBundle = this.payload.Bundle;\n                            this.payload = this.payload.DRParams;\n                        }\n                        if (this.payload.bundleName && this.payload.objectList) {\n                            drBundle = this.payload.bundleName;\n                            this.payload = this.payload.objectList;\n                        }\n                        break;\n                    case 'LWCPrep':\n                        if (this.payload.config)\n                            this.payload = JSON.parse(this.payload.config);\n                        break;\n                    case 'isCommunity':\n                    case 'getNewportUrl':\n                    case 'getCommunityName':\n                        this.payload = {};\n                }\n                break;\n            default:\n                if (this.payload.IPResult) {\n                    this.payload = this.payload.IPResult;\n                    resultType = 'Integration Procedure';\n                }\n                if (this.payload.OBDRresp) {\n                    this.payload = this.payload.OBDRresp;\n                    resultType = 'DataRaptor';\n                }\n        }\n        //assign labels for parsed payload\n        this.currentMetadata.className = classname;\n        this.currentMetadata.methodName = method;\n        this.currentMetadata.namespace = namespace;\n        this.currentMetadata.sClassName = sClassName;\n        this.currentMetadata.sMethodName = sMethodName;\n        this.currentMetadata.drBundle = drBundle;\n        this.currentMetadata.type = type;\n        this.currentMetadata.resultType = resultType;\n        if (!this.hasOneOrMoreLabels() && callingDescriptor) {\n            this.currentMetadata.callingDescriptor = callingDescriptor;\n        }\n    }\n    hasOneOrMoreLabels() {\n        return Object.values(this.currentMetadata).some(v => v);\n    }\n}\n\n\n//# sourceURL=webpack://jsonwindowts/./Classes/SalesforceNetworkPayload.ts?");

/***/ }),

/***/ "./Classes/WindowShowHideHandler.ts":
/*!******************************************!*\
  !*** ./Classes/WindowShowHideHandler.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ WindowShowHideHandler)\n/* harmony export */ });\n/* harmony import */ var _CustomElements_PageElements_JsonWindow__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../CustomElements/PageElements/JsonWindow */ \"./CustomElements/PageElements/JsonWindow.ts\");\n/* harmony import */ var _CustomElements_PageElements_WindowLauncherButton__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../CustomElements/PageElements/WindowLauncherButton */ \"./CustomElements/PageElements/WindowLauncherButton.ts\");\n\n\nclass WindowShowHideHandler {\n    constructor() {\n        this.watchForBrowserHistoryStateChange();\n    }\n    //computed properties\n    get window() {\n        if (this._window)\n            return this._window;\n        this._window = new _CustomElements_PageElements_JsonWindow__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n        return this._window;\n    }\n    get button() {\n        if (this._button)\n            return this._button;\n        this._button = new _CustomElements_PageElements_WindowLauncherButton__WEBPACK_IMPORTED_MODULE_1__[\"default\"]();\n        return this._button;\n    }\n    get parser_window() {\n        if (this._parser_window)\n            return this._parser_window;\n        this._parser_window = new _CustomElements_PageElements_JsonWindow__WEBPACK_IMPORTED_MODULE_0__[\"default\"]('parser_');\n        return this._parser_window;\n    }\n    get parser_button() {\n        if (this._parser_button)\n            return this._parser_button;\n        this._parser_button = new _CustomElements_PageElements_WindowLauncherButton__WEBPACK_IMPORTED_MODULE_1__[\"default\"]('parser_');\n        return this._parser_button;\n    }\n    //methods\n    watchForBrowserHistoryStateChange() {\n        history.pushState = (f => function pushState() {\n            var ret = f.apply(this, arguments);\n            window.dispatchEvent(new Event('pushstate'));\n            window.dispatchEvent(new Event('locationchange'));\n            return ret;\n        })(history.pushState);\n        history.replaceState = (f => function replaceState() {\n            var ret = f.apply(this, arguments);\n            window.dispatchEvent(new Event('replacestate'));\n            window.dispatchEvent(new Event('locationchange'));\n            return ret;\n        })(history.replaceState);\n        window.addEventListener('popstate', () => {\n            window.dispatchEvent(new Event('locationchange'));\n        });\n        window.addEventListener('locationchange', this.newDataJsonWindow.bind(this));\n    }\n    delayedStart(delay, tries = 0) {\n        const maximumAmountOfTries = 15;\n        const time = new Date().getTime();\n        const buttonAddedToScreen = this.addLauncherButtonsIfApplicable();\n        const notAddedAndStillRemainingTries = !buttonAddedToScreen && tries < maximumAmountOfTries;\n        const locationChangeWithinTheLastFiveSeconds = time - this.lastLocationChange < 5000;\n        const shouldStartAgainAfterDelay = notAddedAndStillRemainingTries || locationChangeWithinTheLastFiveSeconds;\n        if (shouldStartAgainAfterDelay) {\n            tries++;\n            this.pendingDelay = setTimeout(() => this.delayedStart(delay, tries), delay);\n        }\n    }\n    newDataJsonWindow() {\n        const currentTime = new Date().getTime();\n        this.lastLocationChange = currentTime;\n        this.window.exists = false;\n        this.resetPendingDelay();\n        this.delayedStart(2000);\n    }\n    resetPendingDelay() {\n        clearTimeout(this.pendingDelay);\n        this.pendingDelay = null;\n    }\n    allowWindowAndButtonToAddAndRemoveEachOther(parser = '') {\n        const { button, window } = this.getWindowAndButton(parser);\n        button.setAddWindowCallback(window.addToScreen.bind(window));\n        window.setAddButtonCallback(button.addToScreen.bind(button));\n        window.setRemoveButtonCallback(button.remove.bind(button));\n    }\n    removeButton() {\n        this.button.exists && this.button.remove();\n    }\n    addLauncherButtonsIfApplicable() {\n        const isNotSalesforce = !document.querySelector('[data-aura-rendered-by],[data-aura-class]');\n        if (isNotSalesforce)\n            return false;\n        this.addButton('parser_');\n        const numberOfOmniScripts = [\n            ...document.querySelectorAll('[data-data-rendering-service-uid]')\n        ].filter(i => i.jsonDataStr).length;\n        if (numberOfOmniScripts !== 1) {\n            this.removeButton();\n            return false;\n        }\n        this.addButton();\n        return true;\n    }\n    addButton(parser = '') {\n        const { button, window } = this.getWindowAndButton(parser);\n        if (!button.exists && !window.exists) {\n            button.addToScreen();\n            this.allowWindowAndButtonToAddAndRemoveEachOther(parser);\n        }\n    }\n    getWindowAndButton(parser = '') {\n        let window, button;\n        if (parser) {\n            window = this.parser_window;\n            button = this.parser_button;\n        }\n        else {\n            window = this.window;\n            button = this.button;\n        }\n        return ({ button, window });\n    }\n}\n\n\n//# sourceURL=webpack://jsonwindowts/./Classes/WindowShowHideHandler.ts?");

/***/ }),

/***/ "./CustomElements/HelperElements/ClickableBlock.ts":
/*!*********************************************************!*\
  !*** ./CustomElements/HelperElements/ClickableBlock.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ClickableBlock)\n/* harmony export */ });\nclass ClickableBlock extends HTMLElement {\n    constructor(identifier, callback) {\n        super();\n        this.dataset.id = identifier;\n        this.onclick = callback;\n        this.root = document.createElement('div');\n        this.root.style.padding = '1rem .5rem';\n        this.root.style.cursor = 'pointer';\n    }\n    get isSelected() {\n        return this._isSelected;\n    }\n    set isSelected(bool) {\n        this._isSelected = bool;\n        if (bool) {\n            this.root.style.outline = '#35a4da solid 2px';\n            this.root.style.borderRadius = '.5rem';\n            return;\n        }\n        this.root.style.outline = 'initial';\n    }\n    set singleSelect(bool) {\n        this._singleSelect = bool;\n        if (bool) {\n            this.root.style.cursor = 'initial';\n            this.onclick = (e) => null;\n        }\n    }\n    get singleSelect() {\n        return this._singleSelect;\n    }\n    connectedCallback() {\n        if (![...this.children].length) {\n            this.append(this.root, this.root);\n        }\n    }\n    append(el, root) {\n        if (root) {\n            super.append(el);\n            return;\n        }\n        this.root.append(el);\n    }\n}\n\n\n//# sourceURL=webpack://jsonwindowts/./CustomElements/HelperElements/ClickableBlock.ts?");

/***/ }),

/***/ "./CustomElements/HelperElements/DisplayField.ts":
/*!*******************************************************!*\
  !*** ./CustomElements/HelperElements/DisplayField.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ DisplayField)\n/* harmony export */ });\nclass DisplayField extends HTMLElement {\n    constructor(field) {\n        super();\n        this.labelValue = field.label;\n        this.textValue = field.value;\n    }\n    /* computed properties */\n    set textContent(val) {\n        this.style.display = val ? 'block' : 'none';\n        this.text.style.cursor = 'pointer';\n        this.text.textContent = val || '';\n    }\n    get textContent() {\n        return this.text.textContent;\n    }\n    /* methods */\n    connectedCallback() {\n        this.style.display = 'none';\n        this.style.width = 'fit-content';\n        this.style.whiteSpace = 'nowrap';\n        if (!this.label) {\n            this.create();\n            this.append(this.label);\n            this.append(this.text);\n            this.append(this.copyToolTip);\n        }\n    }\n    create() {\n        this.copyToolTip = document.createElement('span');\n        this.copyToolTip.style.visibility = 'hidden';\n        this.copyToolTip.style.color = 'green';\n        this.copyToolTip.style.marginLeft = '.3rem';\n        this.copyToolTip.textContent = 'Copied!';\n        this.label = document.createElement('strong');\n        this.label.textContent = this.labelValue;\n        this.text = document.createElement('span');\n        this.textContent = this.textValue;\n        this.text.addEventListener('click', this.handleClickCopy);\n    }\n    handleClickCopy(e) {\n        const clickableBlock = this.parentElement.parentElement.parentElement;\n        if (!clickableBlock.isSelected && !clickableBlock.singleSelect) {\n            return;\n        }\n        e.stopPropagation();\n        const parent = this.parentElement;\n        parent.showCopyToolTip();\n        navigator.clipboard.writeText(this.textContent);\n        setTimeout(() => parent.hideCopyToolTip(), 500);\n    }\n    showCopyToolTip() {\n        this.copyToolTip.style.visibility = 'visible';\n    }\n    hideCopyToolTip() {\n        this.copyToolTip.style.visibility = 'hidden';\n    }\n}\n\n\n//# sourceURL=webpack://jsonwindowts/./CustomElements/HelperElements/DisplayField.ts?");

/***/ }),

/***/ "./CustomElements/HelperElements/NumberOfResults.ts":
/*!**********************************************************!*\
  !*** ./CustomElements/HelperElements/NumberOfResults.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ NumberOfResults)\n/* harmony export */ });\nclass NumberOfResults extends HTMLElement {\n    set number(val) {\n        this.textContent = `${val} results:`;\n    }\n}\n\n\n//# sourceURL=webpack://jsonwindowts/./CustomElements/HelperElements/NumberOfResults.ts?");

/***/ }),

/***/ "./CustomElements/HelperElements/Repeat.ts":
/*!*************************************************!*\
  !*** ./CustomElements/HelperElements/Repeat.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Repeat)\n/* harmony export */ });\n/* harmony import */ var _ClickableBlock__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ClickableBlock */ \"./CustomElements/HelperElements/ClickableBlock.ts\");\n/* harmony import */ var _NumberOfResults__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./NumberOfResults */ \"./CustomElements/HelperElements/NumberOfResults.ts\");\n\n\nclass Repeat extends HTMLElement {\n    constructor(elements, onClickCallback) {\n        super();\n        this.elements = elements;\n        this.onClickCallback = onClickCallback;\n        this.root = document.createElement('div');\n        this.repeatedElementBox = document.createElement('div');\n        this.numberOfResults = new _NumberOfResults__WEBPACK_IMPORTED_MODULE_1__[\"default\"]();\n        this.root.append(this.numberOfResults);\n        this.root.append(this.repeatedElementBox);\n        this.repeatedElementBox.style.maxHeight = '11rem';\n        this.repeatedElementBox.style.padding = '2px';\n    }\n    connectedCallback() {\n        if (![...this.children].length) {\n            this.append(this.root);\n        }\n        this.update(this.elements);\n    }\n    pointerClick(e) {\n        this.onClickCallback(e, this);\n    }\n    update(elements) {\n        this.elements = elements;\n        this.reset();\n        this.evaluate(elements);\n    }\n    reset() {\n        this.repeatedElementBox.textContent = '';\n        this.numberOfResults.textContent = '';\n        this.currentElement = null;\n        this.lastElementList = [];\n        this.singleOrMultipleElementDisplay();\n    }\n    singleOrMultipleElementDisplay() {\n        const repeat = this.elements.length > 1;\n        this.repeatedElementBox.style.overflow = repeat ? 'scroll' : 'hidden';\n        repeat && (this.numberOfResults.number = this.elements.length);\n    }\n    evaluate(elements) {\n        elements.forEach((element, index) => {\n            const parent = (this.currentElement || this.repeatedElementBox);\n            const listOfChildElements = Array.isArray(element);\n            const onLastElement = index === elements.length - 1;\n            const onlyOneElement = onLastElement && index == 0;\n            if (listOfChildElements) {\n                const child = new _ClickableBlock__WEBPACK_IMPORTED_MODULE_0__[\"default\"](index.toString(), this.pointerClick.bind(this));\n                const notFirstElement = index > 0;\n                if (notFirstElement) {\n                    this.addSeparator(parent);\n                }\n                if (onlyOneElement) {\n                    child.singleSelect = true;\n                }\n                parent.append(child);\n                const parentIsNotRoot = parent == this.currentElement;\n                if (parentIsNotRoot) {\n                    this.lastElementList.push(parent);\n                }\n                this.currentElement = child;\n                this.evaluate(element);\n                return;\n            }\n            if (onLastElement) {\n                const lastParent = this.lastElementList.pop() || this.repeatedElementBox;\n                this.currentElement = lastParent;\n            }\n            parent.append(element);\n        });\n    }\n    addSeparator(parent) {\n        const separatorLine = document.createElement('hr');\n        separatorLine.style.margin = '0';\n        parent.append(separatorLine);\n    }\n}\n\n\n//# sourceURL=webpack://jsonwindowts/./CustomElements/HelperElements/Repeat.ts?");

/***/ }),

/***/ "./CustomElements/PageElements/JsonWindow.ts":
/*!***************************************************!*\
  !*** ./CustomElements/PageElements/JsonWindow.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ JsonWindow)\n/* harmony export */ });\n/* harmony import */ var _HelperElements_Repeat__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../HelperElements/Repeat */ \"./CustomElements/HelperElements/Repeat.ts\");\n/* harmony import */ var _HelperElements_DisplayField__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../HelperElements/DisplayField */ \"./CustomElements/HelperElements/DisplayField.ts\");\n/* harmony import */ var _Classes_DraggableMixin__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../Classes/DraggableMixin */ \"./Classes/DraggableMixin.ts\");\n/* harmony import */ var _Classes_SalesforceNetworkPayload__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../Classes/SalesforceNetworkPayload */ \"./Classes/SalesforceNetworkPayload.ts\");\n\n\n\n\nclass JsonWindow extends (0,_Classes_DraggableMixin__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(HTMLElement) {\n    constructor(parser = '') {\n        super();\n        this.exists = false;\n        this.isParser = !!parser;\n        this.create()\n            .setStyle()\n            .setListeners()\n            .setOtherAttributes();\n        this.expandedHeight = this.clientHeight;\n    }\n    //computed properties\n    get omniScriptElement() {\n        const omniScriptElements = [...document.querySelectorAll('[data-data-rendering-service-uid]')];\n        return omniScriptElements.filter(i => i.jsonDataStr)[0];\n    }\n    get omniScriptParentElement() {\n        return this.omniScriptElement.parentElement;\n    }\n    get prettyPrintDataJson() {\n        var _a;\n        const jsonToParse = this.networkPayloadString ||\n            !this.isParser && ((_a = this.omniScriptElement) === null || _a === void 0 ? void 0 : _a.jsonDataStr) ||\n            '{}';\n        return JSON.stringify(JSON.parse(jsonToParse), null, 2);\n    }\n    get parsed() {\n        var _a;\n        return ((_a = this.parseButton) === null || _a === void 0 ? void 0 : _a.innerText) == 'Clear';\n    }\n    /* methods */\n    //element creation\n    create() {\n        //widget\n        this.displayElement = document.createElement('div');\n        //header\n        this.header = document.createElement('div');\n        this.copyButton = document.createElement('a');\n        this.deleteButton = document.createElement('a');\n        this.minimizeButton = document.createElement('a');\n        this.buttonBlock = document.createElement('div');\n        //textArea\n        this.repeatableData = new _HelperElements_Repeat__WEBPACK_IMPORTED_MODULE_0__[\"default\"]([], this.selectPayloadPreview.bind(this));\n        this.textElement = document.createElement('textarea');\n        this.isParser && (this.parseButton = document.createElement('button'));\n        this.draggableElement = this.displayElement;\n        this.append(this.displayElement);\n        return this;\n    }\n    setStyle() {\n        this.header.setAttribute('style', 'width: 100%; height: 2rem; cursor: move; display: flex; justify-content: space-between; font-size: 1.2rem; aligh-items: center');\n        this.copyButton.setAttribute('style', 'width: fit-content; color: #35a4da;');\n        this.deleteButton.setAttribute('style', 'width: fit-content; color: #35a4da; margin-left: .2rem; padding: 0 .2rem');\n        this.minimizeButton.setAttribute('style', 'width: fit-content; color: #35a4da; margin-right: .2rem');\n        this.textElement.setAttribute('style', '  min-width: 10rem; max-width: 100%; overflow: scroll; border-color: rgba(59, 59, 59, 0.3); border-radius: 0.25rem;');\n        this.isParser && (this.parseButton.setAttribute('style', 'width: fit-content; background-color: #35a4da; color: white; padding: .2rem .4rem; border-radius: .4rem; display: block; margin-left: auto; margin-top: .4rem;'));\n        this.displayElement.setAttribute('style', ' overflow: hidden; z-index: 1000; box-shadow: #000000 2px 2px 7px 2px; background: whitesmoke;padding: 0 .5em .5em; border-style: solid; border-width: 1px;border-color: #35a4da; border-radius: 0.5em; position: fixed; font-size: 1rem;');\n        return this;\n    }\n    setListeners() {\n        this.deleteButton.addEventListener('click', this.remove.bind(this));\n        this.copyButton.addEventListener('click', this.copyToClipboard.bind(this));\n        this.minimizeButton.addEventListener('click', this.toggleExpandWindow.bind(this));\n        this.isParser && this.parseButton.addEventListener('click', this.parseData.bind(this));\n        return this;\n    }\n    setOtherAttributes() {\n        this.copyButton.innerHTML = 'Copy';\n        this.deleteButton.innerHTML = 'X';\n        this.minimizeButton.innerHTML = '-';\n        this.isParser && (this.parseButton.innerHTML = 'Parse Payload');\n        new ResizeObserver(this.updateTextAreaWidth.bind(this)).observe(this.displayElement);\n        !this.isParser && (this.textElement.setAttribute('disabled', ''));\n        return this;\n    }\n    //adding to screen\n    addButtonsToHeader() {\n        this.header.append(this.copyButton);\n        this.buttonBlock.append(this.minimizeButton);\n        this.buttonBlock.append(this.deleteButton);\n        this.header.append(this.buttonBlock);\n    }\n    addHeaderToWindow() {\n        this.displayElement.append(this.header);\n    }\n    addTextAreaToWindow() {\n        this.displayElement.append(this.textElement);\n        this.displayElement.append(this.repeatableData);\n    }\n    addParseButtonToWindow() {\n        this.isParser && (this.displayElement.append(this.parseButton));\n    }\n    addToScreen() {\n        this.addButtonsToHeader();\n        this.addHeaderToWindow();\n        this.addTextAreaToWindow();\n        this.addParseButtonToWindow();\n        this.removeButton();\n        this.setHeaderAsDraggable();\n        this.exists = true;\n        this.reInitialize();\n        if (this.isParser) {\n            this.textElement.innerHTML = '';\n            document.body.prepend(this);\n        }\n        else {\n            this.updateWindowWithCurrentJsonData();\n            this.omniScriptParentElement.append(this);\n            this.interval = setInterval(() => this.updateWindowWithCurrentJsonData(), 3000);\n        }\n    }\n    //data json viewer actions\n    updateWindowWithCurrentJsonData() {\n        if (this.exists) {\n            this.textElement.innerHTML = this.prettyPrintDataJson;\n            const border = true;\n            this.flashTextArea(border);\n        }\n        else {\n            this.stopUpdatingDataJson();\n        }\n    }\n    stopUpdatingDataJson() {\n        clearInterval(this.interval);\n    }\n    //parser actions \n    parseData() {\n        if (!this.parsed) {\n            const unparsedPayload = this.textElement.value;\n            const payload = new _Classes_SalesforceNetworkPayload__WEBPACK_IMPORTED_MODULE_3__[\"default\"](unparsedPayload);\n            const { metadata, parsedString } = payload;\n            this.applyResponseToUI(parsedString, metadata);\n            this.textElement.value = this.prettyPrintDataJson;\n        }\n        else {\n            this.applyResponseToUI();\n        }\n        this.flashTextArea();\n        this.toggleParse();\n    }\n    applyResponseToUI(parsedString, metadata = []) {\n        this.networkPayloadString = parsedString || '';\n        const fieldUpdates = metadata.map(this.fieldLabelsAndValues);\n        this.repeatableData.update(fieldUpdates);\n        this.textElement.value = '';\n    }\n    fieldLabelsAndValues(metadata) {\n        return Object.entries({\n            'Calling Descriptor: ': metadata.callingDescriptor || \"\",\n            'Class : ': metadata.className || \"\",\n            'Method: ': metadata.methodName || \"\",\n            'Namespace: ': metadata.namespace || \"\",\n            'sClass: ': metadata.sClassName || \"\",\n            'Type: ': metadata.type || \"\",\n            'sMethod: ': metadata.sMethodName || \"\",\n            'DataRaptor: ': metadata.drBundle || \"\",\n            'Result Type: ': metadata.resultType || \"\"\n        }).map(([label, value]) => new _HelperElements_DisplayField__WEBPACK_IMPORTED_MODULE_1__[\"default\"]({ label, value }));\n    }\n    toggleParse() {\n        const text = this.parsed ? 'Parse Payload' : 'Clear';\n        if (this.parsed) {\n            this.textElement.removeAttribute('disabled');\n            this.textElement.style.minWidth = '10rem';\n            this.textElement.style.height = '8rem';\n            // this.textElement.style.width = 'unset'\n            // this.textElement.style.height = 'unset'\n            this.parsing = false;\n        }\n        else {\n            this.textElement.setAttribute('disabled', '');\n            this.parsing = true;\n        }\n        this.parseButton.innerText = text;\n    }\n    selectPayloadPreview(e, repeatElement) {\n        const childBlocksExcludingSeparators = [...repeatElement.repeatedElementBox.children].filter((child, index, arr) => !(index % 2));\n        childBlocksExcludingSeparators.map((child, index, arr) => {\n            if (arr.length < 2) {\n                return;\n            }\n            if (e.currentTarget instanceof HTMLElement && index.toString() == e.currentTarget.dataset.id) {\n                this.textElement.value = JSON.stringify(JSON.parse(this.networkPayloadString)[index], null, 2);\n                child.isSelected = true;\n                return;\n            }\n            child.isSelected = false;\n        });\n    }\n    updateTextAreaWidth() {\n        if (!this.expandedHeight && !this.parsed) {\n            this.displayElement.style.height = 'auto';\n        }\n        if (this.parsing) {\n            this.parsing = false;\n            //get widest element being added \n            let width = 0;\n            const repeatElements = [...this.repeatableData.repeatedElementBox.children];\n            repeatElements.map(repeatElement => repeatElement.root &&\n                [...repeatElement.root.children] //fields\n                    .map(field => {\n                    field.showCopyToolTip();\n                    field.clientWidth > width && (width = field.clientWidth);\n                    field.hideCopyToolTip();\n                }));\n            if (width) {\n                //update width\n                this.textElement.style.width = `calc(${width}px + 1rem`;\n                this.textElement.style.minWidth = `calc(${width}px + 1rem`;\n                this.textElement.style.height = `calc(${width}px - 4rem`;\n            }\n            else {\n                //default widened width\n                this.textElement.style.width = '20rem';\n                this.textElement.style.height = '15rem';\n            }\n        }\n    }\n    //common actions\n    toggleExpandWindow(e) {\n        if (this.expandedHeight) {\n            this.displayElement.style.height = `${this.expandedHeight}px`;\n            this.displayElement.style.height = `auto`;\n            this.expandedHeight = 0;\n        }\n        else {\n            this.expandedHeight = this.displayElement.clientHeight;\n            this.displayElement.style.height = '2rem';\n        }\n    }\n    flashTextArea(border) {\n        let delay = 200;\n        if (border) {\n            this.textElement.style.outline = \"solid #acd3e6 1px\";\n            delay = 500;\n        }\n        else {\n            this.textElement.style.backgroundColor = \"#acd3e6\";\n        }\n        setTimeout(() => (this.textElement.style.backgroundColor = \"unset\", this.textElement.style.outline = \"unset\"), delay);\n    }\n    copyToClipboard() {\n        //copy text\n        const jsonDataText = this.textElement.innerHTML || this.textElement.value;\n        navigator.clipboard.writeText(jsonDataText);\n        //flash background blue to signify copy was successful\n        this.flashTextArea();\n    }\n    reInitialize() {\n        if (this.parsed) {\n            this.toggleParse();\n        }\n        this.repeatableData.update([]);\n        this.displayElement.style.top = this.isParser ? '27%' : '12%';\n        this.displayElement.style.left = '75%';\n        this.textElement.style.height = 'initial';\n        this.textElement.style.width = 'initial';\n        this.displayElement.style.height = 'auto';\n        this.isParser && (this.textElement.value = '');\n        // \n    }\n    remove() {\n        this.stopUpdatingDataJson();\n        this.addButton();\n        this.exists = false;\n        super.remove();\n    }\n    //communication with button\n    setRemoveButtonCallback(removeButtonCallback) {\n        this.removeButton = removeButtonCallback;\n    }\n    setAddButtonCallback(addButtonCallback) {\n        this.addButton = addButtonCallback;\n    }\n}\n\n\n//# sourceURL=webpack://jsonwindowts/./CustomElements/PageElements/JsonWindow.ts?");

/***/ }),

/***/ "./CustomElements/PageElements/WindowLauncherButton.ts":
/*!*************************************************************!*\
  !*** ./CustomElements/PageElements/WindowLauncherButton.ts ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ WindowLauncherButton)\n/* harmony export */ });\nclass WindowLauncherButton extends HTMLElement {\n    constructor(parser = '') {\n        super();\n        this.exists = false;\n        this.isParser = !!parser;\n        this.create()\n            .setHoverBehavior()\n            .setStyle()\n            .setText();\n        this.toggleOpacity = this.toggleOpacity.bind(this);\n    }\n    //methods\n    create() {\n        this.button = document.createElement('button');\n        this.append(this.button);\n        return this;\n    }\n    setHoverBehavior() {\n        this.button.onmouseenter = this.toggleOpacity.bind(this);\n        this.button.onmouseleave = this.toggleOpacity.bind(this);\n        return this;\n    }\n    setStyle() {\n        this.button.setAttribute('style', 'position: fixed; right:0; top: 200px; z-index: 1000; font-weight: 1000;border: blue solid 1px;border-radius: 0.3rem 0 0 0.3rem;background: #35a4da; opacity: .6; padding-bottom: 4px;font-size: .75em;');\n        this.isParser && (this.button.style.top = '250px');\n        return this;\n    }\n    setText() {\n        const text = this.isParser ? '&#9729;' : '{}';\n        this.button.innerHTML = text;\n        return this;\n    }\n    setClickListener() {\n        this.button.addEventListener('click', this.addWindow);\n        return this;\n    }\n    toggleOpacity(e) {\n        if (this.button.dataset.bright === 'true' || !e) {\n            this.setAsDull();\n        }\n        else {\n            this.setAsBright();\n        }\n    }\n    setAsDull() {\n        const button = this.button;\n        button.style.opacity = '.6';\n        button.dataset.bright = 'false';\n        if (this.isParser) {\n            button.style.fontSize = '.83em';\n        }\n        else {\n            button.innerHTML = '{}';\n        }\n        button.style.maxHeight = '2em';\n        button.style.maxWidth = '2em';\n    }\n    setAsBright() {\n        const button = this.button;\n        button.style.opacity = '1';\n        button.dataset.bright = 'true';\n        if (this.isParser) {\n            button.style.fontSize = '1.3em';\n        }\n        else {\n            button.innerHTML = '{...}';\n        }\n        button.style.maxHeight = '3em';\n        button.style.maxWidth = '3em';\n    }\n    setAddWindowCallback(addWindowCallback) {\n        this.addWindow = addWindowCallback.bind(this);\n        this.setClickListener();\n    }\n    addToScreen() {\n        this.exists = true;\n        this.reInitialize();\n        document.body.append(this);\n        return true;\n    }\n    reInitialize() {\n        if (this.button.style.opacity === '1') {\n            this.toggleOpacity();\n        }\n    }\n    remove() {\n        this.exists = false;\n        this.toggleOpacity();\n        super.remove();\n    }\n}\n\n\n//# sourceURL=webpack://jsonwindowts/./CustomElements/PageElements/WindowLauncherButton.ts?");

/***/ }),

/***/ "./InitializingScripts/index.ts":
/*!**************************************!*\
  !*** ./InitializingScripts/index.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Classes_WindowShowHideHandler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Classes/WindowShowHideHandler */ \"./Classes/WindowShowHideHandler.ts\");\n/* harmony import */ var _CustomElements_PageElements_WindowLauncherButton__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../CustomElements/PageElements/WindowLauncherButton */ \"./CustomElements/PageElements/WindowLauncherButton.ts\");\n/* harmony import */ var _CustomElements_PageElements_JsonWindow__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../CustomElements/PageElements/JsonWindow */ \"./CustomElements/PageElements/JsonWindow.ts\");\n/* harmony import */ var _CustomElements_HelperElements_Repeat__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../CustomElements/HelperElements/Repeat */ \"./CustomElements/HelperElements/Repeat.ts\");\n/* harmony import */ var _CustomElements_HelperElements_NumberOfResults__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../CustomElements/HelperElements/NumberOfResults */ \"./CustomElements/HelperElements/NumberOfResults.ts\");\n/* harmony import */ var _CustomElements_HelperElements_ClickableBlock__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../CustomElements/HelperElements/ClickableBlock */ \"./CustomElements/HelperElements/ClickableBlock.ts\");\n/* harmony import */ var _CustomElements_HelperElements_DisplayField__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../CustomElements/HelperElements/DisplayField */ \"./CustomElements/HelperElements/DisplayField.ts\");\n\n\n\n\n\n\n\nfunction start() {\n    customElements.define('c-repeat', _CustomElements_HelperElements_Repeat__WEBPACK_IMPORTED_MODULE_3__[\"default\"]);\n    customElements.define('c-number-of-results', _CustomElements_HelperElements_NumberOfResults__WEBPACK_IMPORTED_MODULE_4__[\"default\"]);\n    customElements.define('c-json-window', _CustomElements_PageElements_JsonWindow__WEBPACK_IMPORTED_MODULE_2__[\"default\"]);\n    customElements.define('c-display-field', _CustomElements_HelperElements_DisplayField__WEBPACK_IMPORTED_MODULE_6__[\"default\"]);\n    customElements.define('c-clickable-block', _CustomElements_HelperElements_ClickableBlock__WEBPACK_IMPORTED_MODULE_5__[\"default\"]);\n    customElements.define('c-window-launcher-button', _CustomElements_PageElements_WindowLauncherButton__WEBPACK_IMPORTED_MODULE_1__[\"default\"]);\n    new _Classes_WindowShowHideHandler__WEBPACK_IMPORTED_MODULE_0__[\"default\"]().delayedStart(5000);\n}\nstart();\n\n\n//# sourceURL=webpack://jsonwindowts/./InitializingScripts/index.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./InitializingScripts/index.ts");
/******/ 	
/******/ })()
;